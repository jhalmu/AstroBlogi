---
import { getCollection, type CollectionEntry } from 'astro:content'
import BlogCard from '../../components/BlogCard.astro'
import { sortBlogPosts } from '../../utils/content'
import Layout from '../../layouts/Layout.astro'
import '../../styles/blog.css'

export const prerender = true

export async function getStaticPaths() {
	const POSTS_PER_PAGE = 6

	// Get and validate blog posts
	const allPosts = await getCollection('blog')
	const validPosts = allPosts
	const sortedPosts = sortBlogPosts(validPosts)

	const totalPages = Math.ceil(sortedPosts.length / POSTS_PER_PAGE)

	// Generate paths for pages 2 onwards
	return Array.from({ length: totalPages - 1 }, (_, i) => {
		const page = i + 2 // Start from page 2
		const start = (page - 1) * POSTS_PER_PAGE
		const end = start + POSTS_PER_PAGE
		const pagePosts = sortedPosts.slice(start, end)

		// Get previous and next post titles for navigation
		const prevPageStart = (page - 2) * POSTS_PER_PAGE
		const nextPageStart = page * POSTS_PER_PAGE
		const prevPageTitle = sortedPosts[prevPageStart]?.data.title
		const nextPageTitle = page < totalPages ? sortedPosts[nextPageStart]?.data.title : null

		return {
			params: { page: String(page) },
			props: {
				posts: pagePosts,
				page,
				totalPages,
				prevPageTitle,
				nextPageTitle,
				hasNextPage: page < totalPages,
				hasPrevPage: true
			}
		}
	})
}

interface Props {
	page: number
	posts: CollectionEntry<'blog'>[]
	totalPages: number
	prevPageTitle?: string
	nextPageTitle?: string
	hasNextPage: boolean
	hasPrevPage: boolean
	author?: string
	tags?: string[]
}

const {
	page,
	posts = [],
	totalPages = 0,
	prevPageTitle,
	nextPageTitle,
	hasNextPage = false,
	hasPrevPage = false
} = Astro.props as Props

// Redirect to the main blog page if no posts are available
if (!posts.length) {
	return Astro.redirect('/blog')
}
---

<Layout title={`Blog${page ? ` - Page ${page}` : ''} | Juha Halmu`}>
	<div class='container mx-auto mt-14 px-4'>
		<!-- Blog Posts Grid -->
		<div class='sr-only' role='status'>Page {page} of {totalPages}</div>
		<div
			class="'min-w-xl fle container mx-auto flex-col items-center justify-center text-center"
			<div
			class='mt-12 grid gap-8 md:grid-cols-2 lg:grid-cols-3'
			role='feed'
			aria-label='Blog posts'
		>
			{
				posts.map((post) => (
					<BlogCard
						title={post.data.title}
						description={post.data?.description}
						pubDate={post.data.pubDate ? new Date(post.data.pubDate) : new Date()}
						slug={post.id}
						tags={post.data.tags}
					/>
				))
			}
		</div>
	</div>
	<!-- Pagination -->
	{
		totalPages > 1 && (
			<nav class='mb-24 mt-12' aria-label='Blog pagination' role='navigation'>
				<div class='flex justify-center gap-4'>
					<div class='sr-only' id='pagination-heading'>
						Blog pages navigation
					</div>
					<ul class='flex gap-4' role='list' aria-labelledby='pagination-heading'>
						{hasPrevPage && (
							<li>
								<a
									href={page === 2 ? '/blog' : `/blog/${page - 1}`}
									class='inline-flex items-center rounded-lg bg-purple-600 px-6 py-3 text-white transition-colors duration-200 hover:bg-purple-700'
									aria-label={`Go to previous page${prevPageTitle ? ` (${prevPageTitle})` : ''}`}
									rel='prev'
								>
									<span aria-hidden='true' class='mr-2'>
										←
									</span>
									<span>Previous</span>
									{prevPageTitle && (
										<span class='ml-2 text-sm opacity-75' aria-hidden='true'>
											({prevPageTitle})
										</span>
									)}
								</a>
							</li>
						)}

						<li>
							<a
								href='/blog'
								class='inline-flex items-center rounded-lg bg-purple-500 px-6 py-3 text-white shadow-md transition-all duration-200 hover:bg-purple-600 hover:shadow-lg'
								aria-label='Return to first page of blog posts'
								role='link'
							>
								<span aria-hidden='true' class='mr-2'>
									•
								</span>
								Blog Index
								<span aria-hidden='true' class='ml-2'>
									•
								</span>
							</a>
						</li>

						{hasNextPage && (
							<li>
								<a
									href={`/blog/${page + 1}`}
									class='inline-flex items-center rounded-lg bg-purple-600 px-6 py-3 text-white transition-colors duration-200 hover:bg-purple-700'
									aria-label={`Go to next page${nextPageTitle ? ` (${nextPageTitle})` : ''}`}
									rel='next'
								>
									<span>Next</span>
									{nextPageTitle && (
										<span class='ml-2 text-sm opacity-75' aria-hidden='true'>
											({nextPageTitle})
										</span>
									)}
									<span aria-hidden='true' class='ml-2'>
										→
									</span>
								</a>
							</li>
						)}
					</ul>
				</div>
			</nav>
		)
	}
</Layout>
