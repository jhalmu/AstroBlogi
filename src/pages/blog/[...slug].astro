---
import Prose from '../../components/Prose.astro'
import type { CollectionEntry } from 'astro:content'
import { getCollection } from 'astro:content'
import HeroImage from '../../components/HeroImage.astro'
import Layout from '../../layouts/Layout.astro'
import { render } from 'astro:content'
import { getContentPreview } from '../../utils/utils.js'

// Tell Astro to prerender this page as static HTML
export const prerender = true

export async function getStaticPaths() {
	const posts = await getCollection('blog')
	if (posts.length === 0) {
		return []
	}
	return posts.map((post) => ({
		params: { slug: post.id },
		props: post
	}))
}
type Props = CollectionEntry<'blog'> & {
	data: {
		author: string
		tags: string[]
	}
	author?: string
	tags?: string[]
	lang?: string
}

const post = Astro.props
const { Content } = await render(post)

// Log the content to check if post.body is populated
//console.log('Post body:', post.body)

// Get the description text
const description = post.data.description || (post.body ? getContentPreview(post.body) : '')
---

<Layout
	title={post.data.title}
	description={description}
	type='article'
	publishDate={post.data.pubDate?.toISOString()}
	author={post.data.author || Astro.props.author}
	tags={post.data.tags || Astro.props.tags}
	lang={post.data.lang || Astro.props.lang}
>
	<main>
		{
					<HeroImage
						title={post.data.title}
						description={description}
						lastUpdated={post.data.pubDate?.toISOString()}
						priority={true}
						author={post.data.author || Astro.props.author}
						tags={post.data.tags}
						lang={post.data.lang || Astro.props.lang}
					/>
					<article class='blog-content m-22'>
					<Prose>
						<Content />
					</Prose>
					</article>
				
	</main>
</Layout>
<style>
	.blog-content {
		line-height: 1.6;
		border-radius: 20px;
		padding: 1.25em;
		color: #dee1e7 !important;
	}

	.blog-content :global(h1),
	.blog-content :global(h2),
	.blog-content :global(h3),
	.blog-content :global(h4),
	.blog-content :global(h5),
	.blog-content :global(h6) {
		font-weight: 600;
		margin-top: 2em;
		margin-bottom: 1em;
		text-decoration: none;
		color: #dee1e7 !important;
	}

	.blog-content :global(h1) {
		font-size: 2.25em;
	}

	.blog-content :global(h2) {
		font-size: 1.875em;
	}

	.blog-content :global(h3) {
		font-size: 1.5em;
	}

	.blog-content :global(p) {
		margin-bottom: 1.5em;
		color: #dee1e7;
	}

	.blog-content :global(ul),
	.blog-content :global(ol) {
		margin-left: 2em;
		margin-bottom: 1.5em;
		color: #dee1e7 !important;
	}

	.blog-content :global(li) {
		margin-bottom: 0.5em;
		list-style: '\2192' outside;
		color: #dee1e7 !important;
	}

	.blog-content :global(pre) {
		padding: 1em;
		border-radius: 0.5em;
		margin: 1.5em 0;
		overflow-x: auto;
	}

	.blog-content :global(code) {
		font-family: 'Fira Code', monospace;
		font-size: 0.9em;
		color: #dee1e7 !important;
	}

	.blog-content :global(blockquote) {
		border-left: 4px solid #e2e8f0;
		padding-left: 1em;
		margin: 1.5em 0;
	}

	.blog-content :global(img) {
		max-width: 100%;
		height: auto;
		border-radius: 0.5em;
		margin: 1.5em 0;
	}

	.blog-content :global(a) {
		text-decoration: underline;
		color: #dee1e7;
	}

	.blog-content :global(a:hover) {
		color: #2d3748;
	}

	.blog-content :global(strong) {
		font-weight: 600;
		color: #dee1e7 !important;
	}

	/* Uudet elementit */

	.blog-content :global(hr) {
		border: 0;
		height: 1px;
		background-color: #e2e8f0;
		margin: 2em 0;
	}

	.blog-content :global(table) {
		width: 100%;
		border-collapse: collapse;
		margin: 1.5em 0;
	}

	.blog-content :global(thead) {
		background-color: #f8fafc;
		border-bottom: 2px solid #e2e8f0;
	}

	.blog-content :global(th) {
		text-align: left;
		padding: 0.75em;
		font-weight: 600;
	}

	.blog-content :global(td) {
		padding: 0.75em;
		border-bottom: 1px solid #e2e8f0;
	}

	.blog-content :global(tr:hover) {
		background-color: #f8fafc;
	}
</style>